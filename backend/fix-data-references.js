const { getSequelize } = require('./config/db.config');

async function fixDataReferences() {
  try {
    console.log('üîß CORRECTION DES R√âF√âRENCES AUX UTILISATEURS OBSOL√àTES\n');
    
    const sequelize = getSequelize();
    
    // 1. Lister les utilisateurs r√©els disponibles
    console.log('üë• UTILISATEURS R√âELS DISPONIBLES:');
    console.log('================================');
    
    const [realUsers] = await sequelize.query(`
      SELECT id, nom, prenom, email, role 
      FROM users 
      WHERE actif = 1
      ORDER BY role DESC, nom
    `);
    
    if (realUsers.length === 0) {
      console.log('‚ùå Aucun utilisateur r√©el trouv√© !');
      return;
    }
    
    realUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.prenom} ${user.nom} (${user.email}) - ${user.role}`);
    });
    
    // Choix automatique des conseillers pour replacement
    const availableConseillers = realUsers.filter(user => user.role === 'conseillere' || user.role === 'admin');
    const defaultConseiller = availableConseillers[0]; // Premi√®re conseill√®re disponible
    
    console.log(`\nüéØ CONSEILLER PAR D√âFAUT S√âLECTIONN√â: ${defaultConseiller.prenom} ${defaultConseiller.nom}`);
    
    let totalUpdated = 0;
    
    // 2. Corriger les clients
    console.log('\nüìã CORRECTION DES CLIENTS...');
    console.log('-'.repeat(40));
    
    const obsoleteConseillers = ['Marie Tremblay', 'Sophie Martin', 'Julie Dupont', 'Pierre Lavoie', 'Admin Syst√®me', 'Julie Lefebvre'];
    
    for (const oldConseiller of obsoleteConseillers) {
      const [result] = await sequelize.query(`
        UPDATE clients 
        SET conseillere = ?, date_modification = NOW()
        WHERE conseillere = ?
      `, {
        replacements: [`${defaultConseiller.prenom} ${defaultConseiller.nom}`, oldConseiller]
      });
      
      if (result.affectedRows > 0) {
        console.log(`‚úÖ ${result.affectedRows} client(s) mis √† jour: "${oldConseiller}" ‚Üí "${defaultConseiller.prenom} ${defaultConseiller.nom}"`);
        totalUpdated += result.affectedRows;
      }
    }
    
    // 3. Corriger les leads
    console.log('\nüìã CORRECTION DES LEADS...');
    console.log('-'.repeat(40));
    
    for (const oldConseiller of obsoleteConseillers) {
      const [result] = await sequelize.query(`
        UPDATE leads 
        SET conseillere = ?, date_modification = NOW()
        WHERE conseillere = ?
      `, {
        replacements: [`${defaultConseiller.prenom} ${defaultConseiller.nom}`, oldConseiller]
      });
      
      if (result.affectedRows > 0) {
        console.log(`‚úÖ ${result.affectedRows} lead(s) mis √† jour: "${oldConseiller}" ‚Üí "${defaultConseiller.prenom} ${defaultConseiller.nom}"`);
        totalUpdated += result.affectedRows;
      }
    }
    
    // 4. Correction optionnelle des factures si n√©cessaire
    console.log('\nüìã CORRECTION DES FACTURES (validePar)...');
    console.log('-'.repeat(40));
    
    for (const oldConseiller of obsoleteConseillers) {
      const [result] = await sequelize.query(`
        UPDATE factures 
        SET validePar = ?
        WHERE validePar = ?
      `, {
        replacements: [`${defaultConseiller.prenom} ${defaultConseiller.nom}`, oldConseiller]
      });
      
      if (result.affectedRows > 0) {
        console.log(`‚úÖ ${result.affectedRows} facture(s) mise(s) √† jour: "${oldConseiller}" ‚Üí "${defaultConseiller.prenom} ${defaultConseiller.nom}"`);
        totalUpdated += result.affectedRows;
      }
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä R√âSUM√â DE LA CORRECTION:');
    console.log('='.repeat(50));
    console.log(`üî¢ Total d'√©l√©ments corrig√©s: ${totalUpdated}`);
    console.log(`üë§ Nouveau conseiller assign√©: ${defaultConseiller.prenom} ${defaultConseiller.nom}`);
    console.log(`üìß Email: ${defaultConseiller.email}`);
    
    if (totalUpdated > 0) {
      console.log('\n‚úÖ CORRECTION TERMIN√âE AVEC SUCC√àS !');
      console.log('üîÑ Red√©marrez votre serveur pour voir les changements dans l\'interface.');
      
      // V√©rification finale
      console.log('\nüîç V√âRIFICATION FINALE...');
      const [remainingIssues] = await sequelize.query(`
        SELECT 
          (SELECT COUNT(*) FROM clients WHERE conseillere IN (${obsoleteConseillers.map(() => '?').join(', ')})) as clients_restants,
          (SELECT COUNT(*) FROM leads WHERE conseillere IN (${obsoleteConseillers.map(() => '?').join(', ')})) as leads_restants
      `, {
        replacements: [...obsoleteConseillers, ...obsoleteConseillers]
      });
      
      const totalRemaining = remainingIssues[0].clients_restants + remainingIssues[0].leads_restants;
      
      if (totalRemaining === 0) {
        console.log('‚úÖ Aucune r√©f√©rence obsol√®te restante !');
      } else {
        console.log(`‚ö†Ô∏è  ${totalRemaining} r√©f√©rence(s) obsol√®te(s) restante(s)`);
      }
      
    } else {
      console.log('\nüìã Aucune donn√©e √† corriger trouv√©e.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
    throw error;
  }
}

async function interactiveAssignment() {
  try {
    console.log('üéØ ASSIGNATION PERSONNALIS√âE DES DONN√âES\n');
    
    const sequelize = getSequelize();
    
    // Lister les utilisateurs r√©els
    const [realUsers] = await sequelize.query(`
      SELECT id, nom, prenom, email, role 
      FROM users 
      WHERE actif = 1 AND (role = 'conseillere' OR role = 'admin')
      ORDER BY role DESC, nom
    `);
    
    if (realUsers.length === 0) {
      console.log('‚ùå Aucun conseiller disponible !');
      return;
    }
    
    console.log('Conseillers disponibles:');
    realUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.prenom} ${user.nom} (${user.email}) - ${user.role}`);
    });
    
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    // R√©partition √©quitable des donn√©es entre les conseillers
    console.log('\nüîÑ R√©partition √©quitable des donn√©es...');
    
    const [clientsWithOldRefs] = await sequelize.query(`
      SELECT id, nom, prenom, conseillere
      FROM clients
      WHERE conseillere IN ('Marie Tremblay', 'Sophie Martin', 'Julie Dupont', 'Pierre Lavoie', 'Admin Syst√®me', 'Julie Lefebvre')
      ORDER BY id
    `);
    
    const [leadsWithOldRefs] = await sequelize.query(`
      SELECT id, nom, prenom, conseillere
      FROM leads
      WHERE conseillere IN ('Marie Tremblay', 'Sophie Martin', 'Julie Dupont', 'Pierre Lavoie', 'Admin Syst√®me', 'Julie Lefebvre')
      ORDER BY id
    `);
    
    let totalAssigned = 0;
    
    // R√©partir les clients √©quitablement
    for (let i = 0; i < clientsWithOldRefs.length; i++) {
      const client = clientsWithOldRefs[i];
      const assignedConseiller = realUsers[i % realUsers.length];
      
      await sequelize.query(`
        UPDATE clients 
        SET conseillere = ?, date_modification = NOW()
        WHERE id = ?
      `, {
        replacements: [`${assignedConseiller.prenom} ${assignedConseiller.nom}`, client.id]
      });
      
      console.log(`üìã Client ${client.prenom} ${client.nom} ‚Üí ${assignedConseiller.prenom} ${assignedConseiller.nom}`);
      totalAssigned++;
    }
    
    // R√©partir les leads √©quitablement
    for (let i = 0; i < leadsWithOldRefs.length; i++) {
      const lead = leadsWithOldRefs[i];
      const assignedConseiller = realUsers[i % realUsers.length];
      
      await sequelize.query(`
        UPDATE leads 
        SET conseillere = ?, date_modification = NOW()
        WHERE id = ?
      `, {
        replacements: [`${assignedConseiller.prenom} ${assignedConseiller.nom}`, lead.id]
      });
      
      console.log(`üéØ Lead ${lead.prenom} ${lead.nom} ‚Üí ${assignedConseiller.prenom} ${assignedConseiller.nom}`);
      totalAssigned++;
    }
    
    rl.close();
    
    console.log(`\n‚úÖ ${totalAssigned} √©l√©ments r√©assign√©s √©quitablement !`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'assignation:', error);
  }
}

// Permettre d'ex√©cuter des actions sp√©cifiques
const action = process.argv[2];

if (action === 'interactive') {
  interactiveAssignment().then(() => process.exit(0));
} else {
  console.log('üõ†Ô∏è  CORRECTION DES R√âF√âRENCES OBSOL√àTES\n');
  console.log('Usage:');
  console.log('  node fix-data-references.js               - Correction automatique');
  console.log('  node fix-data-references.js interactive   - R√©partition √©quitable');
  console.log('');
  
  fixDataReferences().then(() => process.exit(0));
} 