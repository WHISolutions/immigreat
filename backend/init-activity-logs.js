const { getSequelize, testConnection } = require('./config/db.config');

const initializeActivityLogs = async () => {
  try {
    console.log('üîÑ Initialisation du syst√®me de journaux d\'activit√©...');
    
    // Test de connexion
    await testConnection();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');

    // Initialiser les mod√®les
    const initializeModels = require('./models/index');
    const db = initializeModels();
    const sequelize = getSequelize();

    // Forcer la synchronisation du mod√®le ActivityLog
    await db.ActivityLog.sync({ alter: true });
    console.log('‚úÖ Table activity_logs synchronis√©e');

    // V√©rifier que la table existe et a la bonne structure
    const tableInfo = await sequelize.query(`DESCRIBE activity_logs`, {
      type: sequelize.QueryTypes.SELECT
    });
    
    console.log('üìä Structure de la table activity_logs:');
    tableInfo.forEach(column => {
      console.log(`  - ${column.Field}: ${column.Type} ${column.Null === 'NO' ? 'NOT NULL' : 'NULL'}`);
    });

    // V√©rifier les associations
    if (db.User && db.ActivityLog) {
      console.log('‚úÖ Associations User <-> ActivityLog configur√©es');
    }

    console.log('üéâ Syst√®me de journaux d\'activit√© initialis√© avec succ√®s!');
    console.log('üí° Vous pouvez maintenant:');
    console.log('   1. D√©marrer le serveur backend');
    console.log('   2. Vous connecter en tant qu\'administrateur');
    console.log('   3. Acc√©der √† la page "Journaux d\'activit√©"');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    console.error('D√©tails:', error.message);
  } finally {
    process.exit(0);
  }
};

initializeActivityLogs();
