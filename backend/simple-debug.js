const mysql = require('mysql2/promise');

async function simpleDebug() {
    console.log('üîÑ Diagnostic simple du probl√®me');
    
    const connection = await mysql.createConnection({
        host: 'localhost',
        user: 'root',
        password: '',
        database: 'immigration_production'
    });
    console.log('‚úÖ Connexion √©tablie');

    try {
        // 1. V√©rifier l'utilisateur de test
        const testEmail = 'hamza@example.com';
        const [user] = await connection.execute(`
            SELECT id, nom, prenom, CONCAT(prenom, ' ', nom) as nom_complet, actif
            FROM users 
            WHERE email = ? AND role = 'conseillere'
        `, [testEmail]);
        
        if (user.length === 0) {
            console.log('‚ùå Utilisateur non trouv√©');
            return;
        }
        
        const userData = user[0];
        console.log(`\n1. üë§ Utilisateur: ${userData.nom_complet} (ID: ${userData.id})`);
        
        // 2. V√©rifier les leads assign√©s
        const [assignedLeads] = await connection.execute(`
            SELECT id, nom, prenom, conseillere, conseiller_id, statut
            FROM leads 
            WHERE conseiller_id = ? OR conseillere = ?
            ORDER BY id DESC
            LIMIT 10
        `, [userData.id, userData.nom_complet]);
        
        console.log(`\n2. üìã Leads assign√©s: ${assignedLeads.length}`);
        
        if (assignedLeads.length > 0) {
            assignedLeads.forEach(lead => {
                console.log(`   - Lead #${lead.id}: ${lead.prenom} ${lead.nom} (${lead.statut})`);
            });
        } else {
            console.log('   ‚ö†Ô∏è  Aucun lead assign√© trouv√©');
        }
        
        // 3. Tester le filtrage frontend
        const [allLeads] = await connection.execute(`
            SELECT id, nom, prenom, conseillere, conseiller_id, statut
            FROM leads 
            ORDER BY id DESC
            LIMIT 20
        `);
        
        console.log(`\n3. üîç Test du filtrage frontend:`);
        console.log(`   Total leads: ${allLeads.length}`);
        
        const userName = userData.nom_complet;
        const filteredLeads = allLeads.filter(lead => {
            if (!lead.conseillere) return true; // Leads non assign√©s
            return lead.conseillere.toLowerCase().includes(userName.toLowerCase()) ||
                   userName.toLowerCase().includes(lead.conseillere.toLowerCase());
        });
        
        console.log(`   Leads filtr√©s pour "${userName}": ${filteredLeads.length}`);
        
        if (filteredLeads.length > 0) {
            console.log('   üìù Leads qui devraient s\'afficher:');
            filteredLeads.forEach(lead => {
                console.log(`      - Lead #${lead.id}: ${lead.prenom} ${lead.nom} (conseill√®re: "${lead.conseillere || 'Non assign√©'}")`);
            });
        }
        
        // 4. V√©rifier les serveurs
        console.log(`\n4. üîß ACTIONS √Ä EFFECTUER:`);
        
        if (assignedLeads.length === 0) {
            console.log('   ‚ùå PROBL√àME: Aucun lead assign√©');
            console.log('   üí° SOLUTION: Assigner des leads √† cette conseill√®re');
            
            // Proposer d'assigner un lead de test
            const [unassignedLeads] = await connection.execute(`
                SELECT id, nom, prenom, statut
                FROM leads 
                WHERE conseiller_id IS NULL OR conseillere IS NULL OR conseillere = ''
                LIMIT 3
            `);
            
            if (unassignedLeads.length > 0) {
                console.log('   üìù Leads non assign√©s disponibles:');
                unassignedLeads.forEach(lead => {
                    console.log(`      - Lead #${lead.id}: ${lead.prenom} ${lead.nom}`);
                });
                
                console.log(`\n   üîß Pour assigner le lead #${unassignedLeads[0].id} √† ${userData.nom_complet}:`);
                console.log(`   UPDATE leads SET conseiller_id = ${userData.id}, conseillere = '${userData.nom_complet}' WHERE id = ${unassignedLeads[0].id};`);
            }
        } else {
            console.log('   ‚úÖ Des leads sont assign√©s');
            console.log('   üîß V√©rifiez que:');
            console.log('   1. Les serveurs backend et frontend sont red√©marr√©s');
            console.log('   2. Vous √™tes connect√© avec hamza@example.com / password123');
            console.log(`   3. localStorage.userName contient "${userData.nom_complet}"`);
            console.log('   4. Aucune erreur dans la console du navigateur');
        }
        
        // 5. Cr√©er un lead de test
        console.log(`\n5. üß™ Cr√©ation d'un lead de test:`);
        
        const [insertResult] = await connection.execute(`
            INSERT INTO leads (nom, prenom, email, telephone, source, interet, conseillere, conseiller_id, statut, date_creation, date_modification)
            VALUES ('Test', 'Lead', 'test@example.com', '1234567890', 'Web', '√âtudes', ?, ?, 'Nouveau', NOW(), NOW())
        `, [userData.nom_complet, userData.id]);
        
        console.log(`   ‚úÖ Lead de test cr√©√© avec ID: ${insertResult.insertId}`);
        console.log(`   üìù Lead: Lead Test assign√© √† ${userData.nom_complet}`);
        
        // 6. V√©rification finale
        const [finalCheck] = await connection.execute(`
            SELECT COUNT(*) as count
            FROM leads 
            WHERE conseiller_id = ? OR conseillere = ?
        `, [userData.id, userData.nom_complet]);
        
        console.log(`\n6. ‚úÖ R√âSULTAT FINAL:`);
        console.log(`   Leads assign√©s √† ${userData.nom_complet}: ${finalCheck[0].count}`);
        console.log(`   Le syst√®me devrait maintenant fonctionner !`);
        
        console.log(`\nüéØ INSTRUCTIONS DE TEST:`);
        console.log(`   1. Red√©marrez les serveurs`);
        console.log(`   2. Connectez-vous avec hamza@example.com / password123`);
        console.log(`   3. V√©rifiez que vous voyez ${finalCheck[0].count} lead(s) dans l'interface`);
        
    } catch (error) {
        console.error('‚ùå Erreur:', error);
    } finally {
        await connection.end();
    }
}

simpleDebug().catch(console.error); 