# Script PowerShell de d√©ploiement Docker pour Windows
# Usage: .\deploy.ps1 [dev|prod]

param(
    [Parameter(Position=0)]
    [ValidateSet("dev", "prod")]
    [string]$Environment = "dev"
)

# Couleurs pour les logs
function Write-Log {
    param([string]$Message, [string]$Color = "Green")
    Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] $Message" -ForegroundColor $Color
}

function Write-Error-Log {
    param([string]$Message)
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

function Write-Warning-Log {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Write-Info-Log {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Blue
}

# V√©rifier que Docker est install√©
try {
    docker --version | Out-Null
    docker-compose --version | Out-Null
} catch {
    Write-Error-Log "Docker ou Docker Compose n'est pas install√© ou n'est pas dans le PATH !"
    exit 1
}

# V√©rifier que le fichier .env existe
if (-not (Test-Path ".env")) {
    Write-Warning-Log "Fichier .env non trouv√©. Copie du fichier .env.example..."
    if (Test-Path ".env.example") {
        Copy-Item ".env.example" ".env"
        Write-Warning-Log "‚ö†Ô∏è  IMPORTANT: Modifiez le fichier .env avec vos vraies valeurs avant de continuer !"
        Write-Warning-Log "Notamment les mots de passe et les secrets JWT !"
        Read-Host "Appuyez sur Entr√©e quand c'est fait"
    } else {
        Write-Error-Log "Fichier .env.example non trouv√© !"
        exit 1
    }
}

Write-Log "üöÄ D√©marrage du d√©ploiement en mode $Environment"

# Arr√™ter les conteneurs existants
Write-Log "üõë Arr√™t des conteneurs existants..."
try {
    docker-compose down
} catch {
    Write-Warning-Log "Aucun conteneur √† arr√™ter"
}

# Nettoyer les images non utilis√©es (optionnel)
if ($Environment -eq "prod") {
    Write-Log "üßπ Nettoyage des images non utilis√©es..."
    docker system prune -f
}

# Construire les images
Write-Log "üî® Construction de l'image de l'application..."
docker-compose build --no-cache app

# D√©marrer les services
Write-Log "üåü D√©marrage des services..."
if ($Environment -eq "prod") {
    docker-compose up -d
} else {
    docker-compose up -d db
    Write-Log "‚è≥ Attente que MySQL soit pr√™t..."
    Start-Sleep -Seconds 15
    docker-compose up -d app
}

# Attendre que les services soient pr√™ts
Write-Log "‚è≥ V√©rification que les services sont pr√™ts..."
Start-Sleep -Seconds 10

# V√©rifier le statut des conteneurs
Write-Log "üìä Statut des conteneurs:"
docker-compose ps

# Test de sant√©
Write-Log "üè• Test de sant√© de l'application..."
Start-Sleep -Seconds 5
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/" -UseBasicParsing -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Log "‚úÖ Application accessible sur http://localhost:3000"
    }
} catch {
    Write-Warning-Log "‚ö†Ô∏è  L'application ne r√©pond pas encore, v√©rifiez les logs"
}

# Lire les informations du fichier .env
$envContent = Get-Content ".env" | Where-Object { $_ -match "^DB_NAME=" }
$dbName = ($envContent -split "=")[1]

# Afficher les informations de connexion
Write-Log "üìã Informations de connexion:"
Write-Info-Log "Application: http://localhost:3000"
Write-Info-Log "Base de donn√©es: localhost:3306"
Write-Info-Log "Nom de la BDD: $dbName"

# Afficher les commandes utiles
Write-Log "üõ†Ô∏è  Commandes utiles:"
Write-Info-Log "Voir les logs de l'app: docker-compose logs -f app"
Write-Info-Log "Voir les logs de la BDD: docker-compose logs -f db"
Write-Info-Log "Arr√™ter les services: docker-compose down"
Write-Info-Log "Red√©marrer l'app: docker-compose restart app"

Write-Log "üéâ D√©ploiement termin√© !"

# En mode dev, suivre les logs
if ($Environment -eq "dev") {
    Write-Log "üìù Suivi des logs en temps r√©el (Ctrl+C pour quitter):"
    docker-compose logs -f app
}
