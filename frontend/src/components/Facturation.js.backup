import React, { useState, useEffect } from 'react';
import { jsPDF } from 'jspdf';
import { 
  getAllFactures, 
  updateFacture, 
  formatMontant, 
  getStatutClass, 
  mapStatutForDisplay,
  formatDate,
  canEditFacture 
} from '../services/facturesAPI';
import '../styles/Facturation.css';
import FactureForm from './FactureForm';

// üî¥ FONCTIONS POUR GESTION TTC
// Calculer le montant TTC √† partir du montant HT (15% de TVA)
const calculerMontantTTC = (montantHT) => {
  const ht = parseFloat(montantHT) || 0;
  const ttc = ht * 1.15; // 15% de TVA
  return Math.round(ttc * 100) / 100; // Arrondir √† 2 d√©cimales
};

// Formater un montant HT en affichant le TTC
const formatMontantTTC = (montantHT) => {
  const ttc = calculerMontantTTC(montantHT);
  return `${ttc.toFixed(2)} $`;
};

// Formater pour affichage avec indication TTC
const formatMontantAvecTTC = (montantHT) => {
  const ht = parseFloat(montantHT) || 0;
  const ttc = calculerMontantTTC(montantHT);
  return `${ttc.toFixed(2)} $ TTC (${ht.toFixed(2)} $ HT)`;
};

function Facturation({ userRole = 'conseillere' }) {
  const [factures, setFactures] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [userName, setUserName] = useState('');
  const [filteredBy, setFilteredBy] = useState('');
  
  // üî¥ NOUVEAUX √âTATS POUR LE TRI
  const [sortConfig, setSortConfig] = useState({
    key: null,
    direction: 'asc'
  });
  
  const [filtres, setFiltres] = useState({
    statut: '',
    client: '',
    periode: ''
  });
  
  const [nouvelleFacture, setNouvelleFacture] = useState({
    client: '',
    montant: '',
    dateEmission: new Date().toISOString().split('T')[0],
    dateEcheance: '',
    description: ''
  });
  
  const [showModal, setShowModal] = useState(false);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [factureDetails, setFactureDetails] = useState(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [factureToEdit, setFactureToEdit] = useState(null);
  
  // √âtat pour g√©rer l'ouverture/fermeture des menus Actions
  const [dropdownOpenId, setDropdownOpenId] = useState(null);
  
  // Options pour les filtres et le formulaire
  const statutOptions = ['Brouillon', 'Payable', 'Pay√©e', 'En retard', 'Annul√©e'];
  const periodeOptions = ['Tous', 'Ce mois', 'Mois pr√©c√©dent', 'Ce trimestre', 'Cette ann√©e'];
  const methodePaiementOptions = ['Carte de cr√©dit', 'Virement bancaire', 'Ch√®que', 'Esp√®ces', 'PayPal'];

  // üî¥ FONCTION DE TRI
  const handleSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') {
      direction = 'desc';
    }
    setSortConfig({ key, direction });
    console.log(`üîÑ Tri par ${key} en ordre ${direction}`);
  };

  // üî¥ FONCTION POUR TRIER LES DONN√âES
  const getSortedFactures = (factures) => {
    if (!sortConfig.key) {
      return factures;
    }

    return [...factures].sort((a, b) => {
      let aValue = a[sortConfig.key];
      let bValue = b[sortConfig.key];

      // Gestion sp√©ciale pour les diff√©rents types de donn√©es
      switch(sortConfig.key) {
        case 'numero':
          // Tri alphanum√©rique pour les num√©ros de facture
          aValue = aValue || '';
          bValue = bValue || '';
          break;
        
        case 'montant':
          // Tri num√©rique pour les montants
          aValue = parseFloat(aValue) || 0;
          bValue = parseFloat(bValue) || 0;
          break;
        
        case 'dateEmission':
        case 'dateEcheance':
          // Tri par date
          aValue = new Date(aValue || '1900-01-01');
          bValue = new Date(bValue || '1900-01-01');
          break;
        
        case 'statut':
          // Tri par statut avec ordre logique
          const statutOrder = {
            'brouillon': 0,
            'payable': 1,
            'en_retard': 2,
            'payee': 3,
            'annulee': 4
          };
          aValue = statutOrder[aValue?.toLowerCase()] ?? 999;
          bValue = statutOrder[bValue?.toLowerCase()] ?? 999;
          break;
        
        case 'client':
        default:
          // Tri alphab√©tique pour texte
          aValue = (aValue || '').toString().toLowerCase();
          bValue = (bValue || '').toString().toLowerCase();
          break;
      }

      if (aValue < bValue) {
        return sortConfig.direction === 'asc' ? -1 : 1;
      }
      if (aValue > bValue) {
        return sortConfig.direction === 'asc' ? 1 : -1;
      }
      return 0;
    });
  };

  // üî¥ FONCTION POUR AFFICHER L'IC√îNE DE TRI
  const getSortIcon = (columnKey) => {
    if (sortConfig.key !== columnKey) {
      return <span className="sort-icon" title="Cliquer pour trier">‚áµ</span>; // Ic√¥ne neutre
    }
    return (
      <span className="sort-icon active" title={`Tri√© par ${columnKey} (${sortConfig.direction === 'asc' ? 'croissant' : 'd√©croissant'})`}>
        {sortConfig.direction === 'asc' ? '‚ñ¥' : '‚ñæ'}
      </span>
    );
  };
  
  // Charger les factures depuis l'API
  const chargerFactures = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const result = await getAllFactures();
      
      if (result.success) {
        setFactures(result.data);
        setFilteredBy(result.filteredBy || 'Toutes');
        console.log('‚úÖ Factures charg√©es:', result.data.length, 'factures');
        console.log('üîç Filtr√©es par:', result.filteredBy || 'Toutes');
        console.log('üë§ Utilisateur connect√©:', userName, '- R√¥le:', userRole);
        
        // Debug: Afficher les factures et leur validePar pour comprendre le filtrage
        if (userRole === 'conseillere') {
          console.log('üîç D√©tail des factures pour d√©bogage:');
          result.data.forEach(facture => {
            console.log(`   Facture ${facture.numero}: validePar="${facture.validePar}"`);
          });
        }
        
        // Message informatif pour les conseill√®res
        if (userRole === 'conseillere' && result.filteredBy && result.filteredBy !== 'Toutes') {
          console.log('üîí Affichage limit√© aux factures de la conseill√®re connect√©e');
        }
      } else {
        setError(result.error || 'Erreur lors du chargement des factures');
        console.error('‚ùå Erreur:', result.error);
      }
    } catch (error) {
      setError('Erreur de connexion √† l\'API');
      console.error('‚ùå Erreur de connexion:', error);
    } finally {
      setLoading(false);
    }
  };
  
  // Charger les informations utilisateur au d√©marrage
  useEffect(() => {
    const storedUserName = localStorage.getItem('userName') || '';
    const storedRole = localStorage.getItem('role') || '';
    setUserName(storedUserName);
    console.log('üë§ Utilisateur connect√©:', storedUserName, '- R√¥le:', storedRole);
  }, []);

  // Charger les factures au d√©marrage
  useEffect(() => {
    chargerFactures();
  }, []);
  
  // Obtenir la liste des clients depuis les factures
  const clientsOptions = Array.from(
    new Set(factures.map(f => f.client).filter(Boolean))
  ).sort();
  
  // Filtrer les factures
  const facturesFiltrees = factures.filter(facture => {
    return (
      (filtres.statut === '' || facture.statut === filtres.statut) &&
      (filtres.client === '' || facture.client === filtres.client) &&
      (filtres.periode === '' || filtrerParPeriode(facture.dateEmission, filtres.periode))
    );
  });
  
  // Filtrer par p√©riode
  const filtrerParPeriode = (dateEmission, periode) => {
    const date = new Date(dateEmission);
    const maintenant = new Date();
    
    switch(periode) {
      case 'Ce mois':
        return date.getMonth() === maintenant.getMonth() && date.getFullYear() === maintenant.getFullYear();
      case 'Mois pr√©c√©dent':
        const moisPrecedent = new Date(maintenant.getFullYear(), maintenant.getMonth() - 1);
        return date.getMonth() === moisPrecedent.getMonth() && date.getFullYear() === moisPrecedent.getFullYear();
      case 'Ce trimestre':
        const trimestre = Math.floor(maintenant.getMonth() / 3);
        const trimestreDate = Math.floor(date.getMonth() / 3);
        return trimestreDate === trimestre && date.getFullYear() === maintenant.getFullYear();
      case 'Cette ann√©e':
        return date.getFullYear() === maintenant.getFullYear();
      default:
        return true;
    }
  };
  
  // G√©rer les changements de filtres
  const handleFiltreChange = (e) => {
    const { name, value } = e.target;
    setFiltres({
      ...filtres,
      [name]: value
    });
  };
  
  // R√©initialiser les filtres
  const resetFiltres = () => {
    setFiltres({
      statut: '',
      client: '',
      periode: ''
    });
  };
  
  // G√©rer les changements dans le formulaire de nouvelle facture
  const handleNouvelleFactureChange = (e) => {
    const { name, value } = e.target;
    setNouvelleFacture({
      ...nouvelleFacture,
      [name]: value
    });
  };
  
  // Calculer la date d'√©ch√©ance (30 jours apr√®s √©mission)
  const calculerDateEcheance = (dateEmission) => {
    const date = new Date(dateEmission);
    date.setDate(date.getDate() + 30);
    return date.toISOString().split('T')[0];
  };
  
  // Mettre √† jour la date d'√©ch√©ance lorsque la date d'√©mission change
  const handleDateEmissionChange = (e) => {
    const dateEmission = e.target.value;
    const dateEcheance = calculerDateEcheance(dateEmission);
    
    setNouvelleFacture({
      ...nouvelleFacture,
      dateEmission,
      dateEcheance
    });
  };
  
  // Ajouter une nouvelle facture
  const ajouterFacture = (e) => {
    e.preventDefault();
    
    // G√©n√©rer un num√©ro de facture unique
    const date = new Date();
    const annee = date.getFullYear();
    const nombreFactures = factures.length + 1;
    const numero = `FAC-${annee}-${String(nombreFactures).padStart(3, '0')}`;
    
    const newFacture = {
      id: factures.length + 1,
      numero,
      ...nouvelleFacture,
      statut: 'En attente',
      datePaiement: null,
      methodePaiement: null
    };
    
    setFactures([...factures, newFacture]);
    setNouvelleFacture({
      client: '',
      montant: '',
      dateEmission: new Date().toISOString().split('T')[0],
      dateEcheance: '',
      description: ''
    });
    setShowModal(false);
  };
  
  // Voir les d√©tails d'une facture
  const voirDetails = (facture) => {
    setFactureDetails(facture);
    setShowDetailsModal(true);
  };
  
  // Changer le statut d'une facture
  const changerStatut = async (id, nouveauStatut, methodePaiement = null) => {
    try {
      console.log('üîÑ === DEBUT CHANGEMENT STATUT ===');
      console.log('üîÑ ID facture:', id);
      console.log('üîÑ Nouveau statut:', nouveauStatut);
      console.log('üîÑ M√©thode de paiement:', methodePaiement);
      
      // üî¥ CORRECTION: Normaliser les statuts fran√ßais vers les statuts anglais pour l'API
      const statutMapping = {
        'Brouillon': 'brouillon',
        'Payable': 'payable', 
        'Pay√©e': 'payee',        // ‚≠ê CORRECTION: "Pay√©e" ‚Üí "payee"
        'En retard': 'en_retard',
        'Annul√©e': 'annulee'
      };
      
      const statutNormalise = statutMapping[nouveauStatut] || nouveauStatut.toLowerCase();
      console.log('üîÑ Statut normalis√© pour l\'API:', statutNormalise);
      
      const updateData = {
        statut: statutNormalise,
        datePaiement: nouveauStatut === 'Pay√©e' ? new Date().toISOString().split('T')[0] : null,
        methodePaiement: nouveauStatut === 'Pay√©e' ? methodePaiement : null
      };
      
      console.log('üì§ Donn√©es √† envoyer √† l\'API:', updateData);
      
      const result = await updateFacture(id, updateData);
      
      console.log('üì• R√©ponse de l\'API:', result);
      
      if (result.success) {
        // Recharger les factures pour avoir les donn√©es √† jour
        await chargerFactures();
        
        // Fermer les modals et mettre √† jour les d√©tails si n√©cessaire
        if (showDetailsModal) {
          setShowDetailsModal(false);
          setFactureDetails(null);
        }
        
        console.log('‚úÖ Statut de facture mis √† jour:', nouveauStatut);
        
        // Message de succ√®s discret
        const notification = document.createElement('div');
        notification.textContent = `‚úÖ Facture ${nouveauStatut.toLowerCase()} avec succ√®s ${methodePaiement ? `(${methodePaiement})` : ''}`;
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: #4caf50;
          color: white;
          padding: 10px 20px;
          border-radius: 5px;
          z-index: 9999;
          font-size: 14px;
          font-weight: 500;
          box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        `;
        document.body.appendChild(notification);
        
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 4000);
        
      } else {
        console.error('‚ùå Erreur mise √† jour:', result.error);
        const errorMessage = result.error || 'Erreur lors de la mise √† jour du statut';
        setError(errorMessage);
        alert(`‚ùå Erreur: ${errorMessage}`);
      }
    } catch (error) {
      console.error('‚ùå === ERREUR CHANGEMENT STATUT ===');
      console.error('‚ùå Erreur compl√®te:', error);
      console.error('‚ùå Message d\'erreur:', error.message);
      console.error('‚ùå Stack trace:', error.stack);
      
      const errorMessage = error.message || 'Erreur lors du changement de statut';
      setError(errorMessage);
      alert(`‚ùå Erreur technique: ${errorMessage}`);
    }
  };

  // üî¥ NOUVELLE FONCTION: Changer uniquement la m√©thode de paiement
  const changerMethodePaiement = async (id, nouvelleMethode) => {
    try {
      console.log('üí≥ === CHANGEMENT METHODE PAIEMENT ===');
      console.log('üí≥ ID facture:', id);
      console.log('üí≥ Nouvelle m√©thode:', nouvelleMethode);
      
      const updateData = {
        methodePaiement: nouvelleMethode
      };
      
      console.log('üì§ Donn√©es √† envoyer √† l\'API:', updateData);
      
      const result = await updateFacture(id, updateData);
      
      console.log('üì• R√©ponse de l\'API:', result);
      
      if (result.success) {
        // Recharger les factures pour avoir les donn√©es √† jour
        await chargerFactures();
        
        // Mettre √† jour les d√©tails si la modal est ouverte
        if (showDetailsModal && factureDetails && factureDetails.id === id) {
          setFactureDetails({
            ...factureDetails,
            methodePaiement: nouvelleMethode
          });
        }
        
        console.log('‚úÖ M√©thode de paiement mise √† jour:', nouvelleMethode);
        
        // Message de succ√®s discret
        const notification = document.createElement('div');
        notification.textContent = `‚úÖ M√©thode de paiement mise √† jour: ${nouvelleMethode}`;
        notification.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          background: #4caf50;
          color: white;
          padding: 10px 20px;
          border-radius: 5px;
          z-index: 9999;
          font-size: 14px;
          font-weight: 500;
          box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        `;
        document.body.appendChild(notification);
        
        setTimeout(() => {
          document.body.removeChild(notification);
        }, 4000);
        
      } else {
        console.error('‚ùå Erreur mise √† jour m√©thode paiement:', result.error);
        const errorMessage = result.error || 'Erreur lors de la mise √† jour de la m√©thode de paiement';
        setError(errorMessage);
        alert(`‚ùå Erreur: ${errorMessage}`);
      }
    } catch (error) {
      console.error('‚ùå === ERREUR CHANGEMENT METHODE PAIEMENT ===');
      console.error('‚ùå Erreur compl√®te:', error);
      
      const errorMessage = error.message || 'Erreur lors du changement de m√©thode de paiement';
      setError(errorMessage);
      alert(`‚ùå Erreur technique: ${errorMessage}`);
    }
  };
  
  // Calculer les statistiques (AFFICHAGE TTC)
  const calculerStatistiques = () => {
    const totalFactures = factures.length;
    const totalMontantHT = factures.reduce((sum, facture) => sum + parseFloat(facture.montant || 0), 0);
    const totalMontantTTC = calculerMontantTTC(totalMontantHT);
    const totalPayees = factures.filter(facture => facture.statut?.toLowerCase() === 'payee').length;
    const totalEnAttente = factures.filter(facture => ['brouillon', 'payable'].includes(facture.statut?.toLowerCase())).length;
    const totalEnRetard = factures.filter(facture => facture.statut?.toLowerCase() === 'en_retard').length;
    
    return {
      totalFactures,
      totalMontant: formatMontantTTC(totalMontantHT), // Afficher en TTC
      totalPayees,
      totalEnAttente,
      totalEnRetard
    };
  };
  
  const stats = calculerStatistiques();
  
  // üî¥ FONCTION POUR CHARGER LE LOGO EN BASE64
  const loadLogoAsBase64 = () => {
    return new Promise((resolve) => {
      const img = new Image();
      img.crossOrigin = 'anonymous';
      img.onload = function() {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        // Redimensionner l'image pour la facture (100x50 pixels)
        canvas.width = 100;
        canvas.height = 50;
        
        // Dessiner l'image redimensionn√©e
        ctx.drawImage(img, 0, 0, 100, 50);
        
        // Convertir en base64
        const dataURL = canvas.toDataURL('image/png');
        resolve(dataURL);
      };
      
      img.onerror = function() {
        console.warn('Logo non trouv√©, utilisation du placeholder');
        resolve(null); // Retourner null si le logo ne peut pas √™tre charg√©
      };
      
      // Charger le logo depuis le dossier public
      img.src = '/assets/logo.png';
    });
  };
  
  // Function to download an invoice as a PDF (FORMAT OFFICIEL)
  const telechargerFacture = async (facture) => {
    const doc = new jsPDF();
    
    // üî¥ CHARGER LE LOGO
    const logoBase64 = await loadLogoAsBase64();
    
    // üî¥ CONFIGURATION DU DOCUMENT
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 20;
    
    // üî¥ EN-T√äTE OFFICIEL
    // Logo
    if (logoBase64) {
      try {
        doc.addImage(logoBase64, 'PNG', margin, 10, 40, 20);
      } catch (error) {
        console.error('Erreur lors de l\'ajout du logo:', error);
        // Fallback: rectangle gris
        doc.setFillColor(240, 240, 240);
        doc.rect(margin, 10, 40, 20, 'F');
        doc.setFontSize(8);
        doc.setTextColor(100, 100, 100);
        doc.text('LOGO', margin + 15, 22);
      }
    } else {
      // Placeholder si le logo n'est pas disponible
      doc.setFillColor(240, 240, 240);
      doc.rect(margin, 10, 40, 20, 'F');
      doc.setFontSize(8);
      doc.setTextColor(100, 100, 100);
      doc.text('LOGO', margin + 15, 22);
    }
    
    // Informations de l'entreprise
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'bold');
    doc.text('SERVICES D\'IMMIGRATION EXPERT', margin + 50, 20);
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text('123 Rue Principale, Montr√©al, QC H1A 1A1', margin + 50, 28);
    doc.text('T√©l: (514) 123-4567 | Email: info@immigration-expert.ca', margin + 50, 34);
    doc.text('Num√©ro TPS: 123456789RT0001 | Num√©ro TVQ: 1234567890TQ0001', margin + 50, 40);
    
    // ‚ö†Ô∏è PERSONNALISATION: Modifiez ces informations selon votre entreprise
    // Nom de l'entreprise, adresse, t√©l√©phone, email, num√©ros de taxes
    
    // Ligne de s√©paration
    doc.setLineWidth(0.5);
    doc.line(margin, 50, pageWidth - margin, 50);
    
    // üî¥ TITRE FACTURE
    doc.setFontSize(24);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(41, 128, 185); // Bleu professionnel
    doc.text('FACTURE', pageWidth - margin - 50, 70);
    
    // üî¥ INFORMATIONS FACTURE ET CLIENT
    let yPosition = 90;
    
    // Informations facture (c√¥t√© droit)
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(0, 0, 0);
    doc.text('Num√©ro de facture:', pageWidth - margin - 80, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(facture.numero, pageWidth - margin - 20, yPosition);
    
    yPosition += 8;
    doc.setFont('helvetica', 'bold');
    doc.text('Date d\'√©mission:', pageWidth - margin - 80, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(formatDate(facture.dateEmission), pageWidth - margin - 20, yPosition);
    
    yPosition += 8;
    doc.setFont('helvetica', 'bold');
    doc.text('Date d\'√©ch√©ance:', pageWidth - margin - 80, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(formatDate(facture.dateEcheance), pageWidth - margin - 20, yPosition);
    
    if (facture.datePaiement) {
      yPosition += 8;
      doc.setFont('helvetica', 'bold');
      doc.text('Date de paiement:', pageWidth - margin - 80, yPosition);
      doc.setFont('helvetica', 'normal');
      doc.text(formatDate(facture.datePaiement), pageWidth - margin - 20, yPosition);
    }
    
    // Informations client (c√¥t√© gauche)
    yPosition = 90;
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('FACTUR√â √Ä:', margin, yPosition);
    
    yPosition += 8;
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    doc.text(facture.client, margin, yPosition);
    
    // üî¥ TABLEAU DES SERVICES
    yPosition += 30;
    
    // En-t√™te du tableau
    doc.setFillColor(41, 128, 185);
    doc.rect(margin, yPosition, pageWidth - 2 * margin, 10, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(10);
    doc.text('DESCRIPTION DU SERVICE', margin + 5, yPosition + 7);
    doc.text('MONTANT (CAD)', pageWidth - margin - 40, yPosition + 7);
    
    yPosition += 15;
    
    // Contenu du tableau
    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'normal');
    
    // Service principal
    doc.text(facture.description || 'Service de consultation en immigration', margin + 5, yPosition);
    const montantHT = parseFloat(facture.montant) || 0;
    doc.text(`${montantHT.toFixed(2)} $`, pageWidth - margin - 40, yPosition);
    
    yPosition += 10;
    
    // Ligne de s√©paration
    doc.setLineWidth(0.3);
    doc.line(margin, yPosition, pageWidth - margin, yPosition);
    
    // üî¥ CALCULS DES TOTAUX
    yPosition += 15;
    
    const tva = montantHT * 0.15;
    const totalTTC = montantHT + tva;
    
    // Sous-total
    doc.setFont('helvetica', 'normal');
    doc.text('Sous-total (HT):', pageWidth - margin - 80, yPosition);
    doc.text(`${montantHT.toFixed(2)} $`, pageWidth - margin - 25, yPosition);
    
    yPosition += 8;
    doc.text('TVA (15%):', pageWidth - margin - 80, yPosition);
    doc.text(`${tva.toFixed(2)} $`, pageWidth - margin - 25, yPosition);
    
    yPosition += 8;
    
    // Total en gras
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.text('TOTAL √Ä PAYER:', pageWidth - margin - 80, yPosition);
    doc.text(`${totalTTC.toFixed(2)} $ CAD`, pageWidth - margin - 35, yPosition);
    
    // Encadrer le total
    doc.setLineWidth(1);
    doc.rect(pageWidth - margin - 90, yPosition - 5, 85, 12);
    
    // üî¥ INFORMATIONS DE PAIEMENT
    yPosition += 25;
    
    if (facture.methodePaiement) {
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(10);
      doc.text('M√©thode de paiement:', margin, yPosition);
      doc.setFont('helvetica', 'normal');
      doc.text(facture.methodePaiement, margin + 50, yPosition);
      yPosition += 8;
    }
    
    doc.setFont('helvetica', 'bold');
    doc.text('Statut de paiement:', margin, yPosition);
    doc.setFont('helvetica', 'normal');
    const statutDisplay = mapStatutForDisplay(facture.statut);
    doc.text(statutDisplay, margin + 50, yPosition);
    
    // üî¥ CONDITIONS DE PAIEMENT
    yPosition += 20;
    
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(10);
    doc.text('CONDITIONS DE PAIEMENT:', margin, yPosition);
    
    yPosition += 8;
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(9);
    doc.text('‚Ä¢ Paiement exigible dans les 30 jours suivant la date d\'√©mission', margin, yPosition);
    yPosition += 6;
    doc.text('‚Ä¢ Des frais de retard de 1,5% par mois s\'appliquent aux paiements en retard', margin, yPosition);
    yPosition += 6;
    doc.text('‚Ä¢ En cas de litige, les tribunaux de Montr√©al seront seuls comp√©tents', margin, yPosition);
    
    // üî¥ PIED DE PAGE
    const footerY = pageHeight - 30;
    
    doc.setLineWidth(0.5);
    doc.line(margin, footerY - 5, pageWidth - margin, footerY - 5);
    
    doc.setFont('helvetica', 'italic');
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text('Merci de votre confiance | Services d\'Immigration Expert', margin, footerY);
    doc.text(`Facture g√©n√©r√©e le ${new Date().toLocaleDateString('fr-CA')}`, pageWidth - margin - 60, footerY);
    
    // T√©l√©charger le PDF
    doc.save(`Facture-Officielle-${facture.numero}.pdf`);
  };

  // Function to print an invoice as a PDF (FORMAT OFFICIEL)
  const imprimerFacture = async (facture) => {
    const doc = new jsPDF();
    
    // üî¥ CHARGER LE LOGO
    const logoBase64 = await loadLogoAsBase64();
    
    // üî¥ CONFIGURATION DU DOCUMENT
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 20;
    
    // üî¥ EN-T√äTE OFFICIEL
    // Logo
    if (logoBase64) {
      try {
        doc.addImage(logoBase64, 'PNG', margin, 10, 40, 20);
      } catch (error) {
        console.error('Erreur lors de l\'ajout du logo:', error);
        // Fallback: rectangle gris
        doc.setFillColor(240, 240, 240);
        doc.rect(margin, 10, 40, 20, 'F');
        doc.setFontSize(8);
        doc.setTextColor(100, 100, 100);
        doc.text('LOGO', margin + 15, 22);
      }
    } else {
      // Placeholder si le logo n'est pas disponible
      doc.setFillColor(240, 240, 240);
      doc.rect(margin, 10, 40, 20, 'F');
      doc.setFontSize(8);
      doc.setTextColor(100, 100, 100);
      doc.text('LOGO', margin + 15, 22);
    }
    
    // Informations de l'entreprise
    doc.setFontSize(16);
    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'bold');
    doc.text('SERVICES D\'IMMIGRATION EXPERT', margin + 50, 20);
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    doc.text('123 Rue Principale, Montr√©al, QC H1A 1A1', margin + 50, 28);
    doc.text('T√©l: (514) 123-4567 | Email: info@immigration-expert.ca', margin + 50, 34);
    doc.text('Num√©ro TPS: 123456789RT0001 | Num√©ro TVQ: 1234567890TQ0001', margin + 50, 40);
    
    // ‚ö†Ô∏è PERSONNALISATION: Modifiez ces informations selon votre entreprise
    // Nom de l'entreprise, adresse, t√©l√©phone, email, num√©ros de taxes
    
    // Ligne de s√©paration
    doc.setLineWidth(0.5);
    doc.line(margin, 50, pageWidth - margin, 50);
    
    // üî¥ TITRE FACTURE
    doc.setFontSize(24);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(41, 128, 185); // Bleu professionnel
    doc.text('FACTURE', pageWidth - margin - 50, 70);
    
    // üî¥ INFORMATIONS FACTURE ET CLIENT
    let yPosition = 90;
    
    // Informations facture (c√¥t√© droit)
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(0, 0, 0);
    doc.text('Num√©ro de facture:', pageWidth - margin - 80, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(facture.numero, pageWidth - margin - 20, yPosition);
    
    yPosition += 8;
    doc.setFont('helvetica', 'bold');
    doc.text('Date d\'√©mission:', pageWidth - margin - 80, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(formatDate(facture.dateEmission), pageWidth - margin - 20, yPosition);
    
    yPosition += 8;
    doc.setFont('helvetica', 'bold');
    doc.text('Date d\'√©ch√©ance:', pageWidth - margin - 80, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(formatDate(facture.dateEcheance), pageWidth - margin - 20, yPosition);
    
    if (facture.datePaiement) {
      yPosition += 8;
      doc.setFont('helvetica', 'bold');
      doc.text('Date de paiement:', pageWidth - margin - 80, yPosition);
      doc.setFont('helvetica', 'normal');
      doc.text(formatDate(facture.datePaiement), pageWidth - margin - 20, yPosition);
    }
    
    // Informations client (c√¥t√© gauche)
    yPosition = 90;
    doc.setFontSize(12);
    doc.setFont('helvetica', 'bold');
    doc.text('FACTUR√â √Ä:', margin, yPosition);
    
    yPosition += 8;
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    doc.text(facture.client, margin, yPosition);
    
    // üî¥ TABLEAU DES SERVICES
    yPosition += 30;
    
    // En-t√™te du tableau
    doc.setFillColor(41, 128, 185);
    doc.rect(margin, yPosition, pageWidth - 2 * margin, 10, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(10);
    doc.text('DESCRIPTION DU SERVICE', margin + 5, yPosition + 7);
    doc.text('MONTANT (CAD)', pageWidth - margin - 40, yPosition + 7);
    
    yPosition += 15;
    
    // Contenu du tableau
    doc.setTextColor(0, 0, 0);
    doc.setFont('helvetica', 'normal');
    
    // Service principal
    doc.text(facture.description || 'Service de consultation en immigration', margin + 5, yPosition);
    const montantHT = parseFloat(facture.montant) || 0;
    doc.text(`${montantHT.toFixed(2)} $`, pageWidth - margin - 40, yPosition);
    
    yPosition += 10;
    
    // Ligne de s√©paration
    doc.setLineWidth(0.3);
    doc.line(margin, yPosition, pageWidth - margin, yPosition);
    
    // üî¥ CALCULS DES TOTAUX
    yPosition += 15;
    
    const tva = montantHT * 0.15;
    const totalTTC = montantHT + tva;
    
    // Sous-total
    doc.setFont('helvetica', 'normal');
    doc.text('Sous-total (HT):', pageWidth - margin - 80, yPosition);
    doc.text(`${montantHT.toFixed(2)} $`, pageWidth - margin - 25, yPosition);
    
    yPosition += 8;
    doc.text('TVA (15%):', pageWidth - margin - 80, yPosition);
    doc.text(`${tva.toFixed(2)} $`, pageWidth - margin - 25, yPosition);
    
    yPosition += 8;
    
    // Total en gras
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(12);
    doc.text('TOTAL √Ä PAYER:', pageWidth - margin - 80, yPosition);
    doc.text(`${totalTTC.toFixed(2)} $ CAD`, pageWidth - margin - 35, yPosition);
    
    // Encadrer le total
    doc.setLineWidth(1);
    doc.rect(pageWidth - margin - 90, yPosition - 5, 85, 12);
    
    // üî¥ INFORMATIONS DE PAIEMENT
    yPosition += 25;
    
    if (facture.methodePaiement) {
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(10);
      doc.text('M√©thode de paiement:', margin, yPosition);
      doc.setFont('helvetica', 'normal');
      doc.text(facture.methodePaiement, margin + 50, yPosition);
      yPosition += 8;
    }
    
    doc.setFont('helvetica', 'bold');
    doc.text('Statut de paiement:', margin, yPosition);
    doc.setFont('helvetica', 'normal');
    const statutDisplay = mapStatutForDisplay(facture.statut);
    doc.text(statutDisplay, margin + 50, yPosition);
    
    // üî¥ CONDITIONS DE PAIEMENT
    yPosition += 20;
    
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(10);
    doc.text('CONDITIONS DE PAIEMENT:', margin, yPosition);
    
    yPosition += 8;
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(9);
    doc.text('‚Ä¢ Paiement exigible dans les 30 jours suivant la date d\'√©mission', margin, yPosition);
    yPosition += 6;
    doc.text('‚Ä¢ Des frais de retard de 1,5% par mois s\'appliquent aux paiements en retard', margin, yPosition);
    yPosition += 6;
    doc.text('‚Ä¢ En cas de litige, les tribunaux de Montr√©al seront seuls comp√©tents', margin, yPosition);
    
    // üî¥ PIED DE PAGE
    const footerY = pageHeight - 30;
    
    doc.setLineWidth(0.5);
    doc.line(margin, footerY - 5, pageWidth - margin, footerY - 5);
    
    doc.setFont('helvetica', 'italic');
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text('Merci de votre confiance | Services d\'Immigration Expert', margin, footerY);
    doc.text(`Facture g√©n√©r√©e le ${new Date().toLocaleDateString('fr-CA')}`, pageWidth - margin - 60, footerY);
    
    // Ouvrir le PDF pour impression
    window.open(doc.output('bloburl'), '_blank');
  };
  
  // √âtat pour g√©rer l'ouverture/fermeture des menus Actions
  const toggleDropdown = (id) => {
    setDropdownOpenId(prev => (prev === id ? null : id));
  };
  
  const ouvrirEdition = (facture) => {
    console.log('üîß Ouverture √©dition pour facture:', facture);
    
    // Extraire les prestations du prestations_details si disponible
    let prestations = [];
    if (facture.prestations_details) {
      try {
        prestations = JSON.parse(facture.prestations_details);
        console.log('üìã Prestations extraites:', prestations);
        // S'assurer que les montants sont num√©riques
        prestations = prestations.map(p => ({
          description: p.description || '',
          montant: parseFloat(p.montant) || 0
        }));
      } catch (error) {
        console.error('Erreur parsing prestations_details:', error);
        prestations = [{ description: facture.description || '', montant: parseFloat(facture.montant) || 0 }];
      }
    } else if (facture.prestations && Array.isArray(facture.prestations)) {
      prestations = facture.prestations.map(p => ({
        description: p.description || '',
        montant: parseFloat(p.montant) || 0
      }));
    } else {
      prestations = [{ description: facture.description || '', montant: parseFloat(facture.montant) || 0 }];
    }

    // Calculer les montants
    const montantHT = prestations.reduce((sum, p) => sum + (parseFloat(p.montant) || 0), 0);
    const tva = montantHT * 0.15;
    const montantTTC = montantHT + tva;

    console.log('üí∞ Montants calcul√©s:', { montantHT, tva, montantTTC });

    // Enrichir la facture avec des prestations par d√©faut si manquantes
    const factureComplete = {
      ...facture,
      prestations,
      montantHT,
      tva,
      montantTTC,
      // S'assurer que la date est au bon format pour le formulaire
      date: facture.dateEmission || facture.date_creation?.split('T')[0] || new Date().toISOString().split('T')[0]
    };
    
    console.log('üìù Facture compl√®te pour √©dition:', factureComplete);
    
    setFactureToEdit(factureComplete);
    setShowEditModal(true);
    setDropdownOpenId(null);
  };
  
  const handleSaveEdition = async (updatedFacture) => {
    try {
      console.log('üìù === DEBUT SAUVEGARDE FACTURE ===');
      console.log('üìù Facture re√ßue pour sauvegarde:', updatedFacture);
      
      // Extraire les donn√©es essentielles
      const { id, numero, date, prestations, ...restData } = updatedFacture;
      
      // üî¥ ETAPE 1: VALIDATION ET NETTOYAGE DES PRESTATIONS
      let prestationsValidees = [];
      if (Array.isArray(prestations) && prestations.length > 0) {
        prestationsValidees = prestations
          .filter(p => p && (p.description || p.montant)) // Filtrer les prestations vides
          .map(p => ({
            description: (p.description || '').trim() || 'Service de consultation',
            montant: parseFloat(p.montant) || 0
          }));
      }
      
      // Si aucune prestation valide, cr√©er une prestation par d√©faut
      if (prestationsValidees.length === 0) {
        prestationsValidees = [{
          description: 'Service de consultation',
          montant: 0
        }];
      }
      
      console.log('üìã Prestations valid√©es:', prestationsValidees);
      
      // üî¥ ETAPE 2: CALCUL DU MONTANT DEFINITIF (HT uniquement pour coh√©rence)
      const montantHT = prestationsValidees.reduce((total, prestation) => {
        return total + (parseFloat(prestation.montant) || 0);
      }, 0);
      
      // Arrondir √† 2 d√©cimales pour √©viter les erreurs de flottant
      const montantFinal = Math.round(montantHT * 100) / 100;
      
      console.log('üí∞ === CALCULS MONTANTS ===');
      console.log('üí∞ Montant HT calcul√©:', montantHT);
      console.log('üí∞ Montant final (arrondi):', montantFinal);
      console.log('üí∞ TVA (15%):', Math.round(montantFinal * 0.15 * 100) / 100);
      console.log('üí∞ TTC:', Math.round(montantFinal * 1.15 * 100) / 100);
      
      // üî¥ ETAPE 3: MISE A JOUR DES PRESTATIONS SI NECESSAIRE
      // Si le montant total des prestations ne correspond pas au montant final
      // (peut arriver lors de modifications manuelles), on met √† jour la premi√®re prestation
      const sommePrestations = prestationsValidees.reduce((sum, p) => sum + p.montant, 0);
      if (Math.abs(sommePrestations - montantFinal) > 0.01) {
        console.log('‚ö†Ô∏è Correction automatique des prestations');
        console.log(`‚ö†Ô∏è Somme prestations: ${sommePrestations}, Montant attendu: ${montantFinal}`);
        
        if (prestationsValidees.length > 0) {
          prestationsValidees[0].montant = montantFinal;
          prestationsValidees[0].description = `Service de consultation - ${montantFinal} CAD`;
        }
      }
      
      console.log('üìã Prestations finales:', prestationsValidees);
      
      // üî¥ ETAPE 4: PREPARATION DU PAYLOAD API
      const payload = {
        numero: numero || `F-${new Date().getFullYear()}-${String(Date.now()).slice(-3)}`,
        montant: montantFinal, // ‚≠ê MONTANT HT UNIQUEMENT
        dateEmission: date || new Date().toISOString().split('T')[0],
        description: (prestationsValidees[0]?.description || 'Service de consultation'),
        statut: updatedFacture.statut || 'brouillon',
        prestations_details: JSON.stringify(prestationsValidees), // ‚≠ê PRESTATIONS COHERENTES
        dateValidation: new Date().toISOString(),
        validePar: userName || 'utilisateur',
        // Conserver les autres champs existants
        client: restData.client,
        client_id: restData.client_id,
        dateEcheance: restData.dateEcheance,
        datePaiement: restData.datePaiement,
        methodePaiement: restData.methodePaiement
      };
      
      console.log('üì§ === PAYLOAD FINAL ===');
      console.log('üì§ Payload √† envoyer:', payload);
      console.log('üì§ Montant final dans payload:', payload.montant);
      console.log('üì§ Prestations_details:', payload.prestations_details);
      
      // üî¥ ETAPE 5: ENVOI A L'API
      const result = await updateFacture(id, payload);
      
      if (result.success) {
        console.log('‚úÖ === SAUVEGARDE REUSSIE ===');
        console.log('‚úÖ Facture mise √† jour avec succ√®s');
        console.log('‚úÖ Montant sauvegard√©:', payload.montant);
        
        // Recharger les donn√©es pour v√©rifier la coh√©rence
        await chargerFactures();
        setShowEditModal(false);
        setFactureToEdit(null);
        
        // Message de confirmation
        alert(`‚úÖ Facture ${payload.numero} mise √† jour avec succ√®s!\nMontant: ${payload.montant} $ (HT)`);
      } else {
        console.error('‚ùå Erreur API:', result.error);
        alert(`‚ùå Erreur lors de la mise √† jour: ${result.error || 'Erreur inconnue'}`);
      }
      
    } catch (err) {
      console.error('‚ùå === ERREUR SAUVEGARDE ===');
      console.error('‚ùå Erreur lors de la sauvegarde:', err);
      alert('‚ùå Erreur lors de la mise √† jour de la facture');
    }
  };
  
  // G√©rer l'√©tat de chargement
  if (loading) {
    return (
      <div className="facturation-container">
        <div className="loading-container">
          <h2>Chargement des factures...</h2>
          <div className="loading-spinner">‚è≥</div>
        </div>
      </div>
    );
  }

  return (
    <div className="facturation-container">
      <div className="facturation-header">
        <h2>Gestion de la Facturation</h2>
        {userRole === 'conseillere' && (
          <div className="filtrage-info">
            <span className="filtrage-badge" title={`Vous ne voyez que les factures o√π validePar = "${userName}" pour des raisons de confidentialit√©`}>
              üîí Mes factures {filteredBy && filteredBy !== 'Toutes' ? `(${filteredBy})` : ''}
            </span>
          </div>
        )}
        <div className="header-actions">
          <button className="btn-secondary" onClick={chargerFactures} disabled={loading}>
            üîÑ Actualiser
          </button>
          <button className="btn-primary" onClick={() => setShowModal(true)}>
            <span>+</span> Nouvelle Facture
          </button>
        </div>
      </div>
      
      {error && (
        <div className="error-container">
          <p className="error-message">‚ùå {error}</p>
          <button className="btn-secondary" onClick={() => setError(null)}>
            Fermer
          </button>
        </div>
      )}
      
      <div className="stats-container">
        <div className="stat-card">
          <h3>{userRole === 'conseillere' ? 'Mes factures' : 'Total des factures'}</h3>
          <p className="stat-value">{stats.totalFactures}</p>
        </div>
        <div className="stat-card">
          <h3>Montant total</h3>
          <p className="stat-value">{stats.totalMontant}</p>
        </div>
        <div className="stat-card">
          <h3>Factures pay√©es</h3>
          <p className="stat-value">{stats.totalPayees}</p>
        </div>
        <div className="stat-card">
          <h3>En attente</h3>
          <p className="stat-value">{stats.totalEnAttente}</p>
        </div>
        <div className="stat-card">
          <h3>En retard</h3>
          <p className="stat-value stat-alert">{stats.totalEnRetard}</p>
        </div>
      </div>
      
      <div className="filtres-container">
        <div className="filtre-group">
          <label>Statut:</label>
          <select 
            name="statut" 
            value={filtres.statut} 
            onChange={handleFiltreChange}
          >
            <option value="">Tous</option>
            {statutOptions.map(option => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        </div>
        
        <div className="filtre-group">
          <label>Client:</label>
          <select 
            name="client" 
            value={filtres.client} 
            onChange={handleFiltreChange}
          >
            <option value="">Tous</option>
            {clientsOptions.map(option => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        </div>
        
        <div className="filtre-group">
          <label>P√©riode:</label>
          <select 
            name="periode" 
            value={filtres.periode} 
            onChange={handleFiltreChange}
          >
            <option value="">Toutes</option>
            {periodeOptions.map(option => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        </div>
        
        <button className="btn-secondary" onClick={resetFiltres}>
          R√©initialiser
        </button>
      </div>
      
      <div className="factures-table-container">
        <table className="factures-table">
          <thead>
            <tr>
              <th 
                onClick={() => handleSort('numero')}
                className={sortConfig.key === 'numero' ? 'sorted' : ''}
              >
                Num√©ro {getSortIcon('numero')}
              </th>
              <th 
                onClick={() => handleSort('client')}
                className={sortConfig.key === 'client' ? 'sorted' : ''}
              >
                Client {getSortIcon('client')}
              </th>
              <th 
                onClick={() => handleSort('montant')}
                className={sortConfig.key === 'montant' ? 'sorted' : ''}
              >
                Montant {getSortIcon('montant')}
              </th>
              <th 
                onClick={() => handleSort('statut')}
                className={sortConfig.key === 'statut' ? 'sorted' : ''}
              >
                Statut {getSortIcon('statut')}
              </th>
              <th 
                onClick={() => handleSort('dateEmission')}
                className={sortConfig.key === 'dateEmission' ? 'sorted' : ''}
              >
                Date √©mission {getSortIcon('dateEmission')}
              </th>
              <th 
                onClick={() => handleSort('dateEcheance')}
                className={sortConfig.key === 'dateEcheance' ? 'sorted' : ''}
              >
                Date √©ch√©ance {getSortIcon('dateEcheance')}
              </th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {facturesFiltrees.length === 0 ? (
              <tr>
                <td colSpan="7" className="no-data">
                  {loading ? 'Chargement...' : 'Aucune facture trouv√©e'}
                </td>
              </tr>
            ) : (
              getSortedFactures(facturesFiltrees).map(facture => (
                <tr key={facture.id}>
                  <td>{facture.numero}</td>
                  <td>{facture.client}</td>
                  <td>{formatMontantTTC(facture.montant)}</td>
                  <td>
                    <span className={`statut-badge ${getStatutClass(facture.statut)}`}>
                      {mapStatutForDisplay(facture.statut)}
                    </span>
                  </td>
                  <td>{formatDate(facture.dateEmission)}</td>
                  <td>{formatDate(facture.dateEcheance)}</td>
                <td>
                  <div className="actions-dropdown">
                    <button className="btn-action" onClick={() => toggleDropdown(facture.id)}>Actions ‚ñæ</button>
                    <div className={`dropdown-content ${dropdownOpenId === facture.id ? 'show' : ''}`}>
                      <button onClick={() => voirDetails(facture)}>Voir d√©tails</button>
                      <button onClick={async () => await telechargerFacture(facture)}>T√©l√©charger</button>
                      <button onClick={async () => await imprimerFacture(facture)}>Imprimer</button>
                      {canEditFacture(facture.statut, userRole) && (
                        <button onClick={() => ouvrirEdition(facture)}>‚úèÔ∏è Modifier</button>
                      )}
                      {canEditFacture(facture.statut, userRole) && facture.statut?.toLowerCase() !== 'payee' && (
                        <button onClick={() => changerStatut(facture.id, 'Pay√©e', 'Carte de cr√©dit')}>
                          Marquer comme pay√©e
                        </button>
                      )}
                      {canEditFacture(facture.statut, userRole) && facture.statut?.toLowerCase() !== 'en_retard' && (
                        <button onClick={() => changerStatut(facture.id, 'En retard')}>
                          Marquer en retard
                        </button>
                      )}
                      {facture.statut?.toLowerCase() !== 'annulee' && (
                        <button onClick={() => changerStatut(facture.id, 'Annul√©e')}>
                          Annuler la facture
                        </button>
                      )}
                    </div>
                  </div>
                </td>
              </tr>
            )))}
          </tbody>
        </table>
      </div>
      
      {showModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>Cr√©er une nouvelle facture</h3>
              <button className="close-btn" onClick={() => setShowModal(false)}>√ó</button>
            </div>
            <form onSubmit={ajouterFacture}>
              <div className="form-row">
                <div className="form-group">
                  <label>Client:</label>
                  <select 
                    name="client" 
                    value={nouvelleFacture.client} 
                    onChange={handleNouvelleFactureChange}
                    required
                  >
                    <option value="">S√©lectionner</option>
                    {clientsOptions.map(option => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                </div>
                <div className="form-group">
                  <label>Montant (CAD):</label>
                  <input 
                    type="number" 
                    name="montant" 
                    value={nouvelleFacture.montant} 
                    onChange={handleNouvelleFactureChange} 
                    step="0.01"
                    min="0"
                    required 
                  />
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Date d'√©mission:</label>
                  <input 
                    type="date" 
                    name="dateEmission" 
                    value={nouvelleFacture.dateEmission} 
                    onChange={handleDateEmissionChange} 
                    required 
                  />
                </div>
                <div className="form-group">
                  <label>Date d'√©ch√©ance:</label>
                  <input 
                    type="date" 
                    name="dateEcheance" 
                    value={nouvelleFacture.dateEcheance} 
                    onChange={handleNouvelleFactureChange} 
                    required 
                    readOnly
                  />
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group full-width">
                  <label>Description:</label>
                  <textarea 
                    name="description" 
                    value={nouvelleFacture.description} 
                    onChange={handleNouvelleFactureChange} 
                    required
                  ></textarea>
                </div>
              </div>
              
              <div className="form-actions">
                <button type="button" className="btn-secondary" onClick={() => setShowModal(false)}>
                  Annuler
                </button>
                <button type="submit" className="btn-primary">
                  Cr√©er
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      
      {showDetailsModal && factureDetails && (
        <div className="modal-overlay">
          <div className="modal-content">
            <div className="modal-header">
              <h3>D√©tails de la facture</h3>
              <button className="close-btn" onClick={() => setShowDetailsModal(false)}>√ó</button>
            </div>
            <div className="facture-details">
              <div className="facture-info">
                <h4>Informations g√©n√©rales</h4>
                <p><strong>Num√©ro:</strong> {factureDetails.numero}</p>
                <p><strong>Client:</strong> {factureDetails.client}</p>
                <p><strong>Montant:</strong> {formatMontantTTC(factureDetails.montant)}</p>
                <p><strong>Statut:</strong> 
                  <span className={`statut-badge statut-${factureDetails.statut.toLowerCase().replace(/\s+/g, '-')}`}>
                    {factureDetails.statut}
                  </span>
                </p>
                <p><strong>Date d'√©mission:</strong> {factureDetails.dateEmission}</p>
                <p><strong>Date d'√©ch√©ance:</strong> {factureDetails.dateEcheance}</p>
                {factureDetails.datePaiement && (
                  <p><strong>Date de paiement:</strong> {factureDetails.datePaiement}</p>
                )}
                {factureDetails.methodePaiement && (
                  <p><strong>M√©thode de paiement:</strong> {factureDetails.methodePaiement}</p>
                )}
                <p><strong>Description:</strong> {factureDetails.description}</p>
              </div>
            
              <div className="facture-actions">
              <h4>Actions</h4>
              
              {/* üî¥ SECTION 1: Changer la m√©thode de paiement (pour toutes les factures) */}
              <div className="paiement-form">
                <h5>M√©thode de paiement</h5>
                <div className="form-group">
                  <label>Changer la m√©thode de paiement:</label>
                  <select 
                    defaultValue={factureDetails.methodePaiement || ""}
                    onChange={(e) => {
                      if (e.target.value && e.target.value !== factureDetails.methodePaiement) {
                        console.log('üí≥ Changement de m√©thode de paiement:', e.target.value);
                        changerMethodePaiement(factureDetails.id, e.target.value);
                      }
                    }}
                  >
                    <option value="">Aucune m√©thode s√©lectionn√©e</option>
                    {methodePaiementOptions.map(option => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                </div>
              </div>
              
              {/* üî¥ SECTION 2: Changer le statut (seulement pour les factures non pay√©es/non annul√©es) */}
              {factureDetails.statut !== 'Pay√©e' && factureDetails.statut !== 'Annul√©e' && (
                <div className="paiement-form">
                  <h5>Marquer comme pay√©e</h5>
                  <div className="form-group">
                    <label>M√©thode de paiement:</label>
                    <select 
                      defaultValue=""
                      onChange={(e) => {
                        if (e.target.value) {
                          console.log('üîÑ Tentative de changement de statut avec m√©thode:', e.target.value);
                          changerStatut(factureDetails.id, 'Pay√©e', e.target.value);
                        }
                      }}
                    >
                      <option value="">S√©lectionner pour marquer comme pay√©e</option>
                      {methodePaiementOptions.map(option => (
                        <option key={option} value={option}>{option}</option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
              
              {/* üî¥ BOUTON FERMER */}
              <div className="paiement-actions">
                <button 
                  className="btn-primary" 
                  onClick={() => {
                    setShowDetailsModal(false);
                    setFactureDetails(null);
                  }}
                  style={{ marginTop: '15px' }}
                >
                  FERMER
                </button>
              </div>
              
              {/* üî¥ AUTRES ACTIONS (Retard, Annulation) */}
              <div className="other-actions">
                {factureDetails.statut !== 'En retard' && factureDetails.statut !== 'Annul√©e' && (
                  <button 
                    className="btn-secondary" 
                    onClick={() => changerStatut(factureDetails.id, 'En retard')}
                  >
                    Marquer en retard
                  </button>
                )}
                {factureDetails.statut !== 'Annul√©e' && (
                  <button 
                    className="btn-secondary" 
                    onClick={() => changerStatut(factureDetails.id, 'Annul√©e')}
                  >
                    Annuler la facture
                  </button>
                )}
              </div>
            </div>
          </div>
          
          <div className="modal-footer">
            <button className="btn-primary" onClick={() => setShowDetailsModal(false)}>
              Fermer
            </button>
          </div>
        </div>
      )}
      
      {/* Modal d'√©dition */}
      {showEditModal && factureToEdit && (
        <div className="modal-overlay">
          <div className="modal-content">
            <FactureForm
              client={{ 
                nom: factureToEdit.client,
                prenom: '',
                email: '',
                telephone: '',
                numeroDossier: factureToEdit.numero 
              }}
              userRole={userRole}
              existingFacture={factureToEdit}
              onCancel={() => { setShowEditModal(false); setFactureToEdit(null); }}
              onSave={handleSaveEdition}
            />
          </div>
        </div>
      )}
    </div>
  );
}

export default Facturation;
