import axios from 'axios';

const API_BASE_URL = 'http://localhost:5000/api';

// Fonction utilitaire pour obtenir les headers avec authentification
const getAuthHeaders = () => {
  const token = localStorage.getItem('token');
  return token ? { Authorization: `Bearer ${token}` } : {};
};

const rapportsAPI = {
  // R√©cup√©rer les donn√©es compl√®tes d'un client pour g√©n√©rer un rapport
  getClientRapportData: async (clientId) => {
    try {
      console.log(`üîÑ [RapportsAPI] R√©cup√©ration des donn√©es de rapport pour le client ${clientId}`);
      
      const response = await axios.get(`${API_BASE_URL}/rapports/client/${clientId}/rapport-donnees`, {
        headers: getAuthHeaders()
      });
      
      console.log('‚úÖ [RapportsAPI] Donn√©es de rapport r√©cup√©r√©es:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå [RapportsAPI] Erreur r√©cup√©ration donn√©es rapport:', error);
      throw error;
    }
  },

  // G√©n√©rer un rapport PDF (simulation)
  generatePDFReport: async (clientId, typeRapport, options = {}) => {
    try {
      console.log(`üìÑ [RapportsAPI] G√©n√©ration PDF pour client ${clientId}, type: ${typeRapport}`);
      
      // Simulation de la g√©n√©ration PDF
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      return {
        success: true,
        message: 'Rapport PDF g√©n√©r√© avec succ√®s',
        url: `/rapports/pdf/client-${clientId}-${typeRapport}-${Date.now()}.pdf`
      };
    } catch (error) {
      console.error('‚ùå [RapportsAPI] Erreur g√©n√©ration PDF:', error);
      throw error;
    }
  },

  // Envoyer un rapport par email (simulation)
  sendReportByEmail: async (clientId, email, typeRapport, options = {}) => {
    try {
      console.log(`üìß [RapportsAPI] Envoi email rapport client ${clientId} vers ${email}`);
      
      // Simulation de l'envoi email
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      return {
        success: true,
        message: `Rapport envoy√© √† ${email} avec succ√®s`
      };
    } catch (error) {
      console.error('‚ùå [RapportsAPI] Erreur envoi email:', error);
      throw error;
    }
  }
};

export default rapportsAPI;
