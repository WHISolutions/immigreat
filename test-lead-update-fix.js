const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';

async function testLeadUpdate() {
  console.log('üß™ TEST DE MISE √Ä JOUR DE LEAD');
  console.log('='.repeat(40));

  try {
    // 1. Connexion administrateur
    console.log('1. Connexion administrateur...');
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'admin@immigration.ca',
      password: 'admin123'
    });

    if (!loginResponse.data.success) {
      console.log('‚ùå √âchec de la connexion admin');
      return;
    }

    const adminToken = loginResponse.data.token;
    const headers = { Authorization: `Bearer ${adminToken}` };
    console.log('‚úÖ Connexion r√©ussie');

    // 2. R√©cup√©rer les leads
    console.log('\n2. R√©cup√©ration des leads...');
    const leadsResponse = await axios.get(`${BASE_URL}/leads`, { headers });
    
    if (!leadsResponse.data.success || leadsResponse.data.data.leads.length === 0) {
      console.log('‚ùå Aucun lead trouv√© pour tester');
      return;
    }

    const testLead = leadsResponse.data.data.leads[0];
    console.log(`‚úÖ Lead de test: ${testLead.prenom} ${testLead.nom} (ID: ${testLead.id})`);

    // 3. Test de mise √† jour simple
    console.log('\n3. Test de mise √† jour...');
    const updateData = {
      notes: `Notes mises √† jour - ${new Date().toISOString()}`
    };

    const updateResponse = await axios.put(`${BASE_URL}/leads/${testLead.id}`, updateData, { headers });

    if (updateResponse.data.success) {
      console.log('‚úÖ Mise √† jour r√©ussie !');
      console.log('üìä R√©ponse:', updateResponse.data.message);
    } else {
      console.log('‚ùå √âchec de la mise √† jour');
      console.log('R√©ponse:', updateResponse.data);
    }

    // 4. Test de r√©assignation (si possible)
    console.log('\n4. Test de r√©assignation...');
    const conseilleresResponse = await axios.get(`${BASE_URL}/users`, { headers });
    const conseillers = conseilleresResponse.data.data.filter(u => u.role === 'conseillere');

    if (conseillers.length > 0) {
      const nouveauConseiller = conseillers[0];
      const reassignData = {
        conseillere: `${nouveauConseiller.prenom} ${nouveauConseiller.nom}`
      };

      console.log(`   R√©assignation √†: ${reassignData.conseillere}`);
      
      const reassignResponse = await axios.put(`${BASE_URL}/leads/${testLead.id}`, reassignData, { headers });

      if (reassignResponse.data.success) {
        console.log('‚úÖ R√©assignation r√©ussie !');
        console.log('üìä R√©ponse:', reassignResponse.data.message);
      } else {
        console.log('‚ùå √âchec de la r√©assignation');
        console.log('R√©ponse:', reassignResponse.data);
      }
    } else {
      console.log('‚ö†Ô∏è Aucun conseiller trouv√© pour tester la r√©assignation');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Donn√©es:', error.response.data);
    }
  }
}

// Ex√©cuter le test
testLeadUpdate();
